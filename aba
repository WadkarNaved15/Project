
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Dynamic Chart</title>
    <!-- Include Chart.js library -->
    <link rel="stylesheet" href="../Stylesheet/chart.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <form id="statusForm" action='/chart-data' method="post">
        <label for="startYear">Start Year:</label>
        <select id="startYear" name="startYear" required>
            <option value="">Select Start Year</option>
            <% yearsRange.forEach(year => { %>
                <option value="<%= year %>"><%= year %></option>
            <% }); %>
        </select><br><br>
        <label for="endYear">End Year:</label>
        <select id="endYear" name="endYear" required>
            <option value="">Select End Year</option>
            <% yearsRange.forEach(year => { %>
                <option value="<%= year %>"><%= year %></option>
            <% }); %>
        </select><br><br>
        <button type="button" onclick="fetchDataAndRenderChart()">Update Chart</button>
    </form>
    <!-- Canvas element for the chart -->
    <div class="canvas">
        <!-- <canvas id="myChart"></canvas> -->
        <canvas id="consumableChart"></canvas>
        <canvas id="nonConsumableChart"></canvas>
        
    </div>
    <script>
//         Function to fetch data from the server and render the chart
// Function to fetch data from the server and render the chart
// Function to fetch data from the server and render the chart
async function fetchDataAndRenderChart() {
    // Fetch data from server
    const startYear = document.getElementById('startYear').value || null;
            const endYear = document.getElementById('endYear').value || null;

            // Prepare the request body with startYear and endYear
            const requestBody = JSON.stringify({ startYear, endYear });
            const response = await fetch(`/chart-data`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: requestBody
            });
            
    const data = await response.json();

    // Extract labels and data from the response
    const labels = data.map(entry => entry.product_name);
    const quantities = data.map(entry => entry.total_quantity);

    // Get the canvas element
    const ctx = document.getElementById('myChart').getContext('2d');

    // Check if an existing chart instance exists
    if (window.myChart instanceof Chart) {
        // Destroy the existing chart
        window.myChart.destroy();
    }
    // const chartWidth = quantities.length > 10 ? 800 : 400;
    // const chartHeight = quantities.length > 10 ? 400 : 200;

    // // Set the canvas size
    // ctx.canvas.width = chartWidth;
    // ctx.canvas.height = chartHeight;
    // console.log(chartWidth)
    // console.log(ctx.canvas.width)

    // Create new chart
    window.myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Total Quantity',
                data: quantities,
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1.5
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
}



        // Call the function to fetch data and render the chart
        fetchDataAndRenderChart();


    </script>
</body>
</html>
